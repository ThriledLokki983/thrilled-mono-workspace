version: '3.9'

services:
  # PostgreSQL Database (production configuration)
  postgres:
    container_name: thrilled-postgres-prod
    image: postgres:14.5-alpine
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE:-thrilled_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./apps/be/base/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - thrilled-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (production configuration)
  redis:
    container_name: thrilled-redis-prod
    image: redis:alpine
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data_prod:/data
      - ./apps/be/base/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - thrilled-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base Backend Service (production)
  base-be:
    container_name: thrilled-base-be-prod
    build:
      context: .
      dockerfile: Dockerfile
      target: production-base
    ports:
      - '${BASE_PORT:-5555}:5555'
    environment:
      - NODE_ENV=production
      - RUNNING_IN_DOCKER=true
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - PORT=5555
      - POSTGRES_DATABASE=${POSTGRES_DATABASE:-thrilled_prod}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: unless-stopped
    networks:
      - thrilled-network-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # FaithCircle Backend Service (production)
  faithcircle-be:
    container_name: thrilled-faithcircle-be-prod
    build:
      context: .
      dockerfile: Dockerfile
      target: production-faithcircle
    ports:
      - '${FAITHCIRCLE_PORT:-8001}:8001'
    environment:
      - NODE_ENV=production
      - RUNNING_IN_DOCKER=true
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - PORT=8001
      - POSTGRES_DATABASE=${POSTGRES_DATABASE:-thrilled_prod}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: unless-stopped
    networks:
      - thrilled-network-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      base-be:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Proxy (production with SSL support)
  nginx:
    container_name: thrilled-nginx-prod
    image: nginx:alpine
    ports:
      - '${PROXY_PORT:-80}:80'
      - '${PROXY_SSL_PORT:-443}:443'
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates if available
    restart: unless-stopped
    networks:
      - thrilled-network-prod
    depends_on:
      - base-be
      - faithcircle-be

# Named volumes for persistent data (production)
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

# Network for service communication (production)
networks:
  thrilled-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
