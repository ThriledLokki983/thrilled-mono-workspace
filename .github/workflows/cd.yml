name: CD - Continuous Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deploy even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REGISTRY_URL: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      packages-changed: ${{ steps.changes.outputs.packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'apps/be/**'
              - 'packages/be/**'
            frontend:
              - 'apps/fe/**'
              - 'packages/fe/**'
            packages:
              - 'packages/**'
              - 'nx.json'
              - 'package.json'
              - 'yarn.lock'

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true' || github.event.inputs.force_deploy == 'true'

    strategy:
      matrix:
        app: [base, faithcircle]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup NX
        uses: nrwl/nx-set-shas@v4

      - name: Build backend packages
        run: yarn nx run-many -t build -p core,be-types,databases --parallel=false

      - name: Build ${{ matrix.app }} backend
        run: yarn nx build ${{ matrix.app }}-be

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}-be
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/be/${{ matrix.app }}
          file: ./apps/be/${{ matrix.app }}/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-backend]
    if: always() && (needs.build-backend.result == 'success' || needs.detect-changes.outputs.frontend-changed == 'true') && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup NX
        uses: nrwl/nx-set-shas@v4

      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."

          # Build and deploy frontend if changed
          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]; then
            echo "Building frontend for staging..."
            yarn nx build faithcircle-fe --configuration=staging
          fi

          # Deploy backend services if changed
          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            echo "Deploying backend services to staging..."
            # Add your staging deployment commands here
            # For example: kubectl, docker-compose, or deployment scripts
          fi

          echo "url=https://staging.thrilled.app" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here
          yarn nx run-many -t e2e -p faithcircle-fe-e2e --configuration=staging || true

  deploy-production:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-backend, deploy-staging]
    if: always() && needs.deploy-staging.result == 'success' && (startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup NX
        uses: nrwl/nx-set-shas@v4

      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying to production environment..."

          # Build and deploy frontend if changed
          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]; then
            echo "Building frontend for production..."
            yarn nx build faithcircle-fe --configuration=production
          fi

          # Deploy backend services if changed
          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            echo "Deploying backend services to production..."
            # Add your production deployment commands here
            # For example: kubectl, docker-compose, or deployment scripts
          fi

          echo "url=https://thrilled.app" >> $GITHUB_OUTPUT

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment via CD pipeline'
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              target_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment completed successfully'
            });

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const stagingResult = '${{ needs.deploy-staging.result }}';
            const productionResult = '${{ needs.deploy-production.result }}';

            let message = 'üöÄ **Deployment Summary**\n\n';

            if (stagingResult !== 'skipped') {
              const stagingIcon = stagingResult === 'success' ? '‚úÖ' : '‚ùå';
              message += `${stagingIcon} **Staging**: ${stagingResult}\n`;
            }

            if (productionResult !== 'skipped') {
              const productionIcon = productionResult === 'success' ? '‚úÖ' : '‚ùå';
              message += `${productionIcon} **Production**: ${productionResult}\n`;
            }

            message += `\n**Commit**: ${context.sha.substring(0, 7)}`;
            message += `\n**Branch**: ${context.ref.replace('refs/heads/', '')}`;

            console.log(message);
