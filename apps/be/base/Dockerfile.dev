# NodeJS Version 20.x (Updated to support Sharp library)
FROM --platform=linux/amd64 node:20-bullseye

# Set working directory to match the workspace structure
WORKDIR /app

# Install system dependencies required for Sharp and mozjpeg on ARM64
# Adding libstdc++6 with specific version that includes GLIBCXX_3.4.26
RUN apt-get update && apt-get install -y \
    build-essential \
    autoconf \
    automake \
    libtool \
    nasm \
    pkg-config \
    libpng-dev \
    python3 \
    libvips-dev \
    gcc \
    g++ \
    make \
    wget \
    software-properties-common \
    && apt-get update \
    && wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - \
    && apt-add-repository "deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-14 main" \
    && apt-get update \
    && apt-get install -y libstdc++-10-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy workspace configuration files
COPY package.json yarn.lock nx.json tsconfig.base.json ./

# Copy package.json files for all workspace projects to enable proper dependency resolution
COPY apps/be/base/package.json ./apps/be/base/
COPY packages/be/auth/package.json ./packages/be/auth/
COPY packages/be/be-types/package.json ./packages/be/be-types/
COPY packages/be/cli/package.json ./packages/be/cli/
COPY packages/be/core/package.json ./packages/be/core/
COPY packages/be/databases/package.json ./packages/be/databases/
COPY packages/be/monitoring/package.json ./packages/be/monitoring/
COPY packages/be/testing/package.json ./packages/be/testing/
COPY packages/be/uploads/package.json ./packages/be/uploads/
COPY packages/be/validation/package.json ./packages/be/validation/
COPY packages/fe/components/package.json ./packages/fe/components/
COPY packages/fe/styles/package.json ./packages/fe/styles/
COPY packages/shared/custom-eslint/package.json ./packages/shared/custom-eslint/
COPY packages/shared/types/package.json ./packages/shared/types/

# Install all workspace dependencies using yarn (as specified in nx instructions)
RUN yarn install --frozen-lockfile

# Rebuild native modules for Linux platform to avoid architecture mismatch
RUN rm -rf node_modules/bcrypt/lib/binding node_modules/sharp/vendor 2>/dev/null || true \
    && yarn install --force

# Verify that bcrypt is properly installed for Linux
RUN node -e "console.log('Testing bcrypt:', require('bcrypt').hashSync('test', 10))"

# Set environment variable to help Sharp find the correct libraries
ENV LD_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu

# Set Env
ENV NODE_ENV=development
ENV RUNNING_IN_DOCKER=true

# Copy development environment file as .env for the container
COPY apps/be/base/.env.development.local ./apps/be/base/.env

# Copy the entire workspace (this will be overridden by volume mounts in development)
COPY . .

# Set the working directory to the specific app
WORKDIR /app/apps/be/base

# After all files are copied, rebuild native modules for Linux to ensure compatibility
RUN cd /app && yarn install --check-files \
    && rm -rf node_modules/bcrypt/lib/binding node_modules/sharp/vendor 2>/dev/null || true \
    && yarn install --force

# Verify that bcrypt is properly installed for Linux
RUN node -e "console.log('Testing bcrypt:', require('bcrypt').hashSync('test', 10))"

# Expose port - will be read from .env at runtime
EXPOSE ${PORT:-5555}

# Cmd script - using nodemon to watch for changes
CMD ["yarn", "dev"]
