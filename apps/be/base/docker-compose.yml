version: '3.9'

services:
  proxy:
    image: nginx:alpine
    container_name: proxy
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    restart: 'unless-stopped'
    networks:
      - backend

  server:
    container_name: server
    build:
      context: ../../../
      dockerfile: apps/be/base/Dockerfile.dev
    ports:
      - '${PORT:-5555}:${PORT:-5555}'
    env_file:
      - .env.development.local
    environment:
      - NODE_ENV=development
    volumes:
      # Mount workspace files but exclude node_modules
      - ../../../apps:/app/apps:delegated
      - ../../../packages:/app/packages:delegated
      - ../../../package.json:/app/package.json:ro
      - ../../../yarn.lock:/app/yarn.lock:ro
      - ../../../nx.json:/app/nx.json:ro
      - ../../../tsconfig.base.json:/app/tsconfig.base.json:ro
      # Use named volumes for node_modules to preserve Linux native modules
      - node_modules:/app/node_modules
      - app_node_modules:/app/apps/be/base/node_modules
    restart: 'unless-stopped'
    networks:
      - backend
    depends_on:
      - pg
      - redis
    # Use this command to ensure proper native modules and dev server
    command: |
      sh -c "
        cd /app/apps/be/base &&
        rm -rf node_modules/bcrypt/lib/binding node_modules/sharp/vendor 2>/dev/null || true &&
        yarn install --check-files &&
        yarn dev
      "

  pg:
    container_name: pg
    image: postgres:14.5-alpine
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    env_file:
      - .env.development.local
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: 'always'
    networks:
      - backend

  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    restart: 'always'
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local
  app_node_modules:
    driver: local
